# Copy this file to .env and adjust values for your local environment.
# docker compose will automatically read .env in this directory.

# ============================================================================
# CORE PROCESSING
# ============================================================================
MODEL=htdemucs
STEMS=D,B,O                    # keep drums+bass+other (drop vocals)
SAMPLE_RATE=44100
BIT_DEPTH=16
OUTPUT_FORMAT=mp3              # mp3, flac, wav
# CODEC=flac                   # legacy, use OUTPUT_FORMAT instead

# ============================================================================
# DEMUCS EXECUTION
# ============================================================================
DEMUCS_DEVICE=cpu              # cpu or cuda
DEMUCS_JOBS=1                  # parallel jobs (1 recommended for CPU)
# Timeout for Demucs processing per chunk in seconds (0 = no timeout)
# Prevents infinite hangs. Adjust based on your CPU speed and chunk size.
DEMUCS_CHUNK_TIMEOUT_SEC=3600  # 1 hour default
# Maximum retry attempts for failed chunks
DEMUCS_MAX_RETRIES=2

# ============================================================================
# AUDIO ENCODING & QUALITY
# ============================================================================
# MP3 encoding: v0 (VBR ~245kbps) or cbr320 (CBR 320kbps)
MP3_ENCODING=v0
# Loudness normalization
TARGET_LUFS=-14
TRUE_PEAK_DBFS=-1.0
DUAL_PASS_LOUDNORM=true

# ============================================================================
# CHUNKING & CROSSFADING
# ============================================================================
CHUNKING_ENABLED=true
CHUNK_MAX=16                   # max chunks for adaptive splitting
CHUNK_OVERLAP_SEC=0.5          # overlap between chunks
CROSSFADE_MS=200               # crossfade duration in milliseconds
RETRY_BACKOFF_SEC=3

# ============================================================================
# PATHS (container paths)
# ============================================================================
INCOMING=/data/incoming
WORKING=/data/working
OUTPUT=/data/output
MUSIC_LIBRARY=/data/output     # final organized library (Artist/Album/Title.mp3)
DB_PATH=/data/db/jobs.sqlite
LOG_DIR=/data/logs
ARCHIVE_DIR=/data/archive
QUARANTINE_DIR=/data/quarantine
STAGING=/data/incoming_queued

# ============================================================================
# FILE HANDLING & STABILITY
# ============================================================================
# Where to send corrupt/unreadable files: archive or quarantine
CORRUPT_DEST=archive
# File stability checking
STABILITY_CHECK_SECONDS=5
STABILITY_PASSES=2
FAST_FS_STABILITY=false        # skip stability checks (dev/test only)
MIN_INPUT_BYTES=1024           # skip files smaller than this
# Move files to staging after scan (prevents re-scanning during processing)
MOVE_TO_STAGING_ENABLED=false

# ============================================================================
# ALBUM & MULTI-TRACK PROCESSING
# ============================================================================
ALBUMS_ENABLED=false           # treat top-level dirs as albums
AUDIO_EXTS=.mp3,.wav,.flac,.m4a,.aac,.ogg,.opus
STRUCTURED_OUTPUT_SINGLES=false # use Artist/Album structure for singles

# ============================================================================
# SIDECAR OVERRIDES
# ============================================================================
SIDECAR_ENABLED=true
SIDECAR_SCHEMA_VALIDATE=true

# ============================================================================
# DEDUPLICATION
# ============================================================================
DEDUPE_BY_FILENAME=false       # skip files with duplicate names
DEDUPE_INCLUDE_ERRORS=true     # also skip files that previously errored
DEDUPE_RENAME_SECOND=false     # auto-rename second occurrence
DEDUPE_CLEANUP_METHOD=none     # none, archive, or purge
RESCAN_INTERVAL_SEC=300        # periodic deep scan for missed files

# ============================================================================
# CONCURRENCY
# ============================================================================
MAX_PARALLEL_JOBS=1            # number of files to process simultaneously

# ============================================================================
# CPU/RESOURCE LIMITING
# ============================================================================
# 0 or empty disables. Set small values to reduce CPU and avoid OOM.
CPU_MAX_THREADS=0              # e.g. 2 (0 = auto)
FFMPEG_THREADS=0               # e.g. 2 (0 = auto, inherits CPU_MAX_THREADS)
CPU_AFFINITY=                  # e.g. 0-3 or 0,2
CPU_NICE=0                     # e.g. 10 (higher = lower priority)

# ============================================================================
# MINIO / S3 MIRRORING
# ============================================================================
MINIO_MIRROR_ENABLED=false     # set true to enable uploader service
MINIO_ENDPOINT=minio:9000      # e.g. minio.yourdomain.com:9000
MINIO_USE_SSL=false            # true for https, false for http
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin
MINIO_BUCKET=instrumentals
MINIO_PREFIX=                  # optional path prefix in bucket
MINIO_CONTENT_TYPE_BY_EXT=true # guess content-type from extension
MINIO_SCAN_INTERVAL_SEC=10     # how often to scan for new files
MINIO_REGION=us-east-1

# ============================================================================
# WEB UI
# ============================================================================
FLASK_SECRET_KEY=change-me-in-production

# ============================================================================
# DOCKER (optional)
# ============================================================================
# Prebuilt image to pull from GitHub Container Registry (recommended)
# For Docker Hub, use: docker.io/<username>/instrumental-maker:latest
DOCKER_IMAGE=ghcr.io/svidal-nlive/instrumental-maker:latest

# Legacy: Docker Hub username (only if you prefer Docker Hub over GHCR)
# DOCKERHUB_USERNAME=youruser
